proj_name = was

!ifeq bootstrap 1
name = bwas$(target_cpu)
!else
name = was$(target_cpu)
!endif

!ifndef was_autodepends
was_autodepends = .AUTODEPEND
!endif

.extensions: .rc .y .re .gh .msg

additional_cleanup = *.y *.re asytab.c asytab.h ytab.c ytab.h aslexyy.c

!include cproj.mif
!include defrule.mif
!include deftarg.mif

!include $(owl_dir)/client.mif
!include wres.mif

# yacc
#########################
yacc_flags      = -b -d
#yacc_flags     = -d -q
#yacc_flags     = -b -d -f -u
#yacc_flags     = -b "y" -l -v
yacc_src        = as.y
yacc_in         = as_in.y
yacc_out_c      = asytab
yacc_out_h      = asytab.h

lex_flags       =
lex_src         = scan.re
lex_in          = scan_in.re
lex_out_c       = aslexyy
lex_out_h       =

# objects
##########
as_comm_objs_axp = alphafmt.obj alphains.obj
as_comm_objs_mps = mipsfmt.obj mipsins.obj
as_comm_objs_ppc = ppcfmt.obj ppcins.obj

as_comm_objs = &
    $(yacc_out_c).obj &
    $(lex_out_c).obj &
    asexpr.obj &
    asopernd.obj &
    asmem.obj &
    asutils.obj &
    asregs.obj &
    assymbol.obj &
    asdrectv.obj &
    asdirop.obj &
    asnumlab.obj &
    ashash.obj

as_stand_objs = &
    main.obj &
    obj.obj &
    sections.obj &
    options.obj &
    preproc.obj &
    ppexpr.obj &
    ppmacro.obj &
    ppmem.obj &
    trmemcvr.obj
!ifeq release 0
as_stand_objs += trmem.obj
!endif

as_inline_objs = &
    asinline.obj &
    asiobj.obj

as_objs = $(as_comm_objs) $(as_comm_objs_$(target_cpu)) asmsg.obj $(as_stand_objs)

asi_objs = $(as_comm_objs) $(as_comm_objs_$(target_cpu)) $(as_inline_objs)

asi_test_objs = asitest.obj trmemcvr.obj
!ifeq release 0
asi_test_objs += trmem.obj
!endif

# cflags
#########
extra_cppflags_axp = -DAS_ALPHA
extra_cppflags_mps = -DAS_MIPS
extra_cppflags_ppc = -DAS_PPC
extra_cpp_flags = $(extra_cppflags_$(target_cpu))
!ifndef inline_as
extra_cpp_flags += -D_STANDALONE_
!endif
!ifeq release 0
extra_cpp_flags += -DTRMEM -DYYDEBUG=1 -DAS_DEBUG_DUMP
!endif

extra_c_flags = -fh

!ifeq release 0
extra_c_flags_386 = -of+
!endif

# lflags
#########
libs = $(owl_lib) $(wres_lib)

# rcflags
##########

# splice options
##################
splice_opts_axp = -kAS_ALPHA
splice_opts_mps = -kAS_MIPS
splice_opts_ppc = -kAS_PPC
splice_opts     = $(splice_opts_$(target_cpu))
!ifndef inline_as
splice_opts += -k_STANDALONE_
!endif

# include directory
####################

.c: $(as_dir)/$(target_cpu)/c;$(as_dir)/c;$(trmem_dir);$(cpp_dir)
.h: $(as_dir)/$(target_cpu)/h;$(as_dir)/h;$(trmem_dir);$(cpp_dir)
.y: $(as_dir)/$(target_cpu)/y;$(as_dir)/y
.re: $(as_dir)/$(target_cpu)/y;$(as_dir)/y
.rc: $(as_dir)/h
.gh: .
.msg: $(as_dir)/h

inc_dirs = -I. -I"$(as_dir)/$(target_cpu)/h" -I"$(as_dir)/h" -I"$(owl_dir)/h" -I"$(cpp_dir)" -I"$(trmem_dir)"

# explicit rules
#################

!ifeq bootstrap 1
asi_dir = $(as_dir)/$(target_cpu)/inline/$(%OWOBJDIR)
!else
asi_dir = $(as_dir)/$(target_cpu)/inline/osi$(host_cpu)
!endif

asi_lib     = $(asi_dir)/asinline.lib
asi_lib_j   = $(asi_dir)/asinlinj.lib

!ifdef test_inline_as
asi_test_name = asinline

$(asi_test_name).exe : $(asi_test_objs) $(asi_lib)
        $(cl) $(clflags) $(asi_test_objs) $(asi_lib) $(ldflags)

$(asi_lib) :
curr_dir=$+$(%cwd)$-
        cd $(asi_dir)
        !wmake -h
        cd $(curr_dir)
!endif

!ifdef asi_build_lib
all_lib : msg.gh $(asi_lib) $(asi_lib_j) .symbolic

$(asi_lib) : $(asi_objs) asmsg.obj
        $(librarian) $(libflags) $<

$(asi_lib_j) : $(asi_lib) asmsgj.obj
        $(librarian) $(libflags) $<
!endif

# systems where version resource must be added to .EXE
version_res_exe_nt_386 = exever.res
version_res_exe_nt_x64 = exever.res

$(name).exe : msg.gh $(as_objs) $(libs) $(name).res $(version_res_exe_$(host_os)_$(host_cpu))
!ifndef __WATCOM__
        $(cl) $(clflags) $(as_objs) $(libs) $(ldflags)
!else
        $(linker) name $@ $(lflags) file {$(as_objs)} lib {$(libs)}
!ifeq host_os osi
        $(w32bind) $^&.rex $^@ $(os2ldr)
        @rm -f $^&.rex
!endif
!endif
        @%make bind_version_res_exe
        $(wstrip) -q -a -r $@ . $(name).res

!ifndef inline_as
$(name).res : as.rc msg.gh
        $(rc_aui) $(cppflags) $[@ -fo=$^@
!endif

!include verrc.mif

msg.gh : as.msg
        $(cpp) $(rc_aui_flags) $(cppflags) $[@ > msg.tmp
        $(awk) -v base=AS_MSG_BASE -f $(build_dir)/makemsg.awk msg.tmp >> $^@

$(yacc_in) : $(yacc_src) $(as_dir)/y/yydriver.c
        wsplice $(splice_opts) $[@ $^@

$(yacc_out_c).c $(yacc_out_h) : $(yacc_in)
        $(yacc) $(yacc_flags) $[@ $(as_dir)/y/yydriver.c > $(nulldevice)
        $(sed) -f $(as_dir)/mif/asyy.sed ytab.c > $(yacc_out_c).c
        $(sed) -f $(as_dir)/mif/asyy.sed ytab.h > $(yacc_out_c).h
        # $(yacc) $(yacc_flags) $[@

$(lex_in) : $(lex_src)
        wsplice $(splice_opts) $[@ $^.

.ERASE
$(lex_out_c).c $(lex_out_h) : $(lex_in)
        $(re2c) $(lex_flags) $[@ > $^.
