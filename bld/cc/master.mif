proj_name = cc

!ifeq bootstrap 1
!ifeq target_cpu i86
exename     = bwcc
dllname     = bwccd
!else
exename     = bwcc$(target_cpu)
dllname     = bwccd$(target_cpu)
!endif
!else
exename     = wc$(target_cpu)
dllname     = wcd$(target_cpu)
!endif

# Base DLL name needs to be 8 chars or less on OS/2, argh! Additionally,
# internal module name may be required to match file name on some platforms.
!ifeq bootstrap 1
realexename = $(exename)
realdllname = $(dllname)
!else
!ifeq target_cpu i86
realexename = wcc
realdllname = wccd
!else
realexename = wcc$(target_cpu)
realdllname = wccd$(target_cpu)
!endif
!endif

cc_autodepends = .autodepend

.extensions: .gh

additional_cleanup = *.int *.u

cc_nosymfile = 1

!include cproj.mif
!include deftarg.mif
!include defrule.mif

# CODEGEN stuff
!include $(cg_dir)/mif/fe.mif
!include $(as_dir)/mif/client.mif
!include $(wasm_dir)/mif/client.mif
!include $(dwarf_dir)/dw/client.mif

!include trmem.mif

!include ../../ccobjs.mif

# international data file name
intname = wcc$(target_cpu)

# other goofy stuff
pre_obj_deps = usage.gh
pre_obj_deps += msgtxt.gh
pre_obj_deps += msgdefs.gh
pre_obj_deps += msgattr.gh
pre_obj_deps += weights.gh
pre_obj_deps += keywords.gh
pre_obj_deps += $(intname)01.int
pre_obj_deps += $(asminline_deps)
pre_obj_deps += $(pre_deps_$(host_os))
pre_obj_deps += code$(target_cpu).gh

#
# C compiler options
#
extra_cpp_flags = -Dlocal=static
!ifneq cc_dll 1
extra_cpp_flags += -DIDE_PGM
!endif
!ifeq cg_dll 1
extra_cpp_flags += -D_CGDLL
!endif

extra_c_flags_386 = -3r

!ifeq cc_dll 1
idedlldriver_c_flags_dos = -bd -DCAUSEWAY
idedlldriver_c_flags_nt  = -bd
idedlldriver_c_flags_os2 = -bd
!endif
!ifneq bootstrap 1
!ifeq release 1
extra_c_flags_cscan_386 = -5r
extra_c_flags_cscan    = $(extra_c_flags_cscan_$(host_cpu))
!endif
!endif
extra_c_flags_cmsg     = -D__msg_file_prefix=$(intname)
extra_c_flags_ideentry = $(idedlldriver_c_flags_$(host_os))
!ifeq cc_dll 1
extra_c_flags_idedrv   =
!else
extra_c_flags_idedrv   = -DSTATIC_LINKAGE
!endif
extra_c_flags_intlload = $(incl_file_opts)fesupp.h
extra_c_flags_maindrv  = -DDLL_NAME=$(realdllname)

#
# WLINK .EXE options
#
extra_l_flags     = option map, symfile

# NOTE: "op off=?" must be 8K bigger than the stack size in wlink_sys_qnx_f
extra_l_flags_qnx = option stack=16k,offset=24k, res=usage.u, priv=3
extra_l_flags_nt  = option stack=1024k commit stack=32k
extra_l_flags_dos = option stack=32k

#
# WLINK .DLL options
#
extra_l_flags_dll     = option map, symfile
extra_l_flags_dll_nt  = initinstance terminstance option offset=0x69400000, modname='$(realdllname).dll'
extra_l_flags_dll_os2 = initinstance terminstance option manyautodata, modname='$(realdllname)'

#
# external libraries
#
xlibs = $(dwarf_dw_lib) $(asminline_lib) $(cg_libs)

#
# External dependencies
#
external_dependencies = $(xlibs)
!ifeq host_os osi
external_dependencies += $(os2ldr)
!endif

#
# Common dependencies
#

depends_exe = $(pre_obj_deps) $(comp_objs_exe) $(external_dependencies)
depends_dll = $(pre_obj_deps) $(comp_objs_dll) $(external_dependencies)
depends_drv = $(pre_obj_deps) $(drv_objs)

# systems where version resources must be added to .DLL
version_res_dll_nt_386 = version.res
version_res_dll_nt_x64 = version.res

# systems where version resources must be added to .EXE
version_res_exe_nt_386 = exever.res
version_res_exe_nt_x64 = exever.res

inc_dirs  = -I. -I.. -I"../../h" $(cg_inc_dirs) $(asminline_inc_dirs)
inc_dirs += -I"$(dwarf_dir)/dw/h" -I"$(comp_cfg_dir)/h" -I"$(fe_misc_dir)/h"

.c: ../../c;$(asminline_c);$(watcom_dir)/c;$(fe_misc_dir)/c
.h: ../../h;$(watcom_dir)/h

comp_objs_exe = $(common_objs) $(exe_objs) $(cl_objs)
comp_objs_dll = $(common_objs) $(dll_objs)

!ifdef cc_dll

$(exename).exe : $(drv_objs) $(realdllname).lib $(version_res_exe_$(host_os)_$(host_cpu)) $(__MAKEFILES__)
        @%write drv.lnk $(lflags)
        @for %i in ($(drv_objs)) do @%append drv.lnk file %i
        @%append drv.lnk lib $(realdllname).lib
!ifeq host_os dos
        @%append drv.lnk lib cwdll.lib
!endif
        $(linker) name $@ @drv.lnk
        @%make bind_version_res_exe

!else

$(exename).exe: $(depends_exe) $(version_res_exe_$(host_os)_$(host_cpu)) $(__MAKEFILES__)
!ifndef __WATCOM__
        $(cl) $(clflags) $(comp_objs_exe) $(xlibs) $(libs) $(ldflags)
!else
        @%write exe.lnk $(lflags)
        @for %i in ($(comp_objs_exe)) do @%append exe.lnk file %i
        @for %i in ($(xlibs)) do @%append exe.lnk lib %i
!ifeq host_os osi
        $(linker) name $^&.rex @exe.lnk
        $(w32bind) $^&.rex $@ $(os2ldr)
        @rm -f $^&.rex
!else   
        $(linker) name $@ @exe.lnk
!endif
!endif
        @%make bind_version_res_exe

!endif

$(dllname).dll : $(depends_dll) $(version_res_dll_$(host_os)_$(host_cpu)) $(__MAKEFILES__)
        @%write dll.lnk $(lflags_dll)
        @%append dll.lnk op impfile=export.tmp
        @for %i in ($(comp_objs_dll)) do @%append dll.lnk file %i
        @for %i in ($(xlibs)) do @%append dll.lnk lib %i
        $(linker) name $@ @dll.lnk
        @%make bind_version_res_dll

$(realdllname).lib : $(dllname).dll $(__MAKEFILES__)
        $(sed) -e s/$(dllname).dll/$(realdllname).dll/g export.tmp > $(realdllname).lbc
        $(librarian) $(libflags) @$(realdllname).lbc

#
# done
#

!ifeq target_cpu axp

codeaxp.gh :
        echo // Dummy file > $@

!else ifeq target_cpu ppc

codeppc.gh :
        echo // Dummy file > $@

!else ifeq target_cpu mps

codemps.gh :
        echo // Dummy file > $@

!else  # Intel i86 or 386

code$(target_cpu).gh : xcode$(target_cpu).tmp ./mkcode.exe
        $]@ $[@ $@
!endif

target_as_axp   = bwasaxp -zq -w8
target_as_i86   = bwasm -zq -w8
target_as_386   = bwasm -zq -w8 -3
target_as_ppc   = bwasppc -zq -w8
target_as_mps   = bwasmps -zq -w8

xcode$(target_cpu).tmp: ../../a/code$(target_cpu).asm
        *$(target_as_$(target_cpu)) -I"$(watcom_dir)/h" -fo=.obj $[@
        *bwlink format dos com op quiet, nodefault file code$(target_cpu).obj name $@ disable 1023,1080

./mkcode.exe: ../../a/mkcode.c
        $(bld_cl) $(bld_clflags) $[@ $(bld_ldflags)

verrc_dll = $(realdllname)
verrc_exe = $(realexename)
verrc_dll_skel = ../../version.rc
verrc_exe_skel = ../../exever.rc
!include verrc.mif

msgtxt.gh msgdefs.gh msgattr.gh errors01.int : ../../gml/cerrs.gml
        msgencod -s -i -ip -q -g ../../gml/cerrs.gml msgtxt.gh msgdefs.gh msgattr.gh

./intlbin.exe: $(fe_misc_dir)/c/intlbin.c
        $(bld_cl) -I"$(fe_misc_dir)/h" $(bld_clflags) $[@ $(bld_ldflags)

$(intname)01.int : ./intlbin.exe errors01.int usage01.int
        $[@ $(intname)

./mkopcod1.exe: $(wasm_dir)/mkopcod1.c $(wasm_dir)/mkopcode.h
        $(bld_cl) -I. -I"$(wasm_dir)/h" $(bld_clflags) $[@ $(bld_ldflags)

asmops.gh: ./mkopcod1.exe $(wasm_dir)/inlnops.tok
        $[@ $(wasm_dir)/inlnops.tok $@

./mkopcode.exe: $(wasm_dir)/mkopcode.c $(wasm_dir)/mkopcode.h asmops.gh
        $(bld_cl) -I. -I"$(wasm_dir)/h" $(bld_clflags) $[@ $(bld_ldflags)

asmopsd.gh: ./mkopcode.exe $(wasm_dir)/inlnops.tok
        $[@ $(wasm_dir)/inlnops.tok $@

key_objs = ../../h/c.key ../../h/pc.key ../../h/seh.key

weights.gh keywords.gh : $(key_objs)
        findhash -q -e ",OPR_NOP" $(key_objs)

# optencod options and targets for various hosts
optencod_opt_qnx = -u usage.u
optencod_targ_bsd   = bsd
optencod_targ_qnx   = qnx
optencod_targ_linux = linux
optencod_targ_osx   = linux
!ifeq release 0
optencod_targ_dbg = dbg
!endif

usage.gh usage01.int : ../../gml/options.gml
        optencod -i -n -q $(optencod_opt_$(host_os)) $]@ . . usage.gh $(target_cpu) $(optencod_targ_dbg) $(optencod_targ_$(host_os))
