proj_name = cc

# Base DLL name needs to be 8 chars or less on OS/2, argh! Additionally,
# internal module name may be required to match file name on some platforms.
!ifdef bootstrap
boot_prefix = b
!endif

exename     = $(boot_prefix)wcc
dllname     = $(boot_prefix)wccd
!ifneq target_cpu i86
exename     +=$(target_cpu)
dllname     +=$(target_cpu)
!endif

cc_autodepends = .autodepend

.extensions: .gh

additional_cleanup = *.int
additional_cleanup_qnx = usage.u
!ifndef bootstrap
additional_cleanup_subdir = $(bin_subdir)
!endif

# international data file name
intname = wcc$(target_cpu)

!ifdef bootstrap
bin_exename = $(exename)
bin_dllname = $(dllname)
bin_intname = $(intname)
!else
bin_exename = $(bin_subdir)/$(exename)
bin_dllname = $(bin_subdir)/$(dllname)
bin_intname = $(bin_subdir)/$(intname)
!endif

$(bin_subdir) : .EXPLICIT
    mkdir $@

!include cproj.mif
!include defrule.mif
!include dllrule.mif
!include deftarg.mif
!include dllbase.mif
!include trmem.mif

# CODEGEN stuff
!include $(cg_dir)/mif/fe.mif
!include asclient.mif

!include ../../ccobjs.mif

# other goofy stuff
prebuild_objs = &
    usage.gh &
    msgtxt.gh &
    msgdefs.gh &
    msgattr.gh &
    weights.gh &
    keywords.gh &
    $(asminline_deps) &
    code$(target_cpu).gh &
    $(bin_intname)01.int

#
# C compiler options
#
extra_cpp_flags =
!ifneq cc_dll 1
extra_cpp_flags += -DIDE_PGM
!endif
!ifeq dll_cg 1
extra_cpp_flags += -D_CGDLL
!endif

extra_cpp_flags_cmsg     = -D__msg_file_prefix=$(intname)
!ifeq cc_dll 1
! ifeq host_os dos
extra_cpp_flags_ideentry = -DCAUSEWAY
! endif
!else
extra_cpp_flags_idedrv   = -DSTATIC_LINKAGE
!endif
extra_cpp_flags_maindrv  = -DDLL_NAME=$(dllname)


extra_c_flags_386 = -3r

!ifdef __WATCOM_TOOLS__
! ifndef bootstrap
!  ifeq release 1
extra_c_flags_cscan_386 = -5r
extra_c_flags_cscan    = $(extra_c_flags_cscan_$(host_cpu))
!  endif
! endif
!endif
extra_c_flags_intlload = $(incl_file_opts)fesupp.h

#
# WLINK .EXE options
#

extra_link_res_qnx = usage.u

extra_l_flags     =

# NOTE: "op off=?" must be 8K bigger than the stack size in wlink_sys_qnx_f
extra_l_flags_qnx = option stack=16k,offset=24k, res=$(extra_link_res_qnx), priv=3
extra_l_flags_dos = option stack=32k

#
# WLINK .DLL options
#
extra_l_flags_dll     = option implib $($(proj_name)_dllbase_$(host_os)_$(host_cpu))
extra_l_flags_dll_nt  = initinstance terminstance op modname='$(dllname).dll'
extra_l_flags_dll_os2 = initinstance terminstance op manyautodata, modname='$(dllname)'

inc_dirs  = -I. -I.. -I"../../h" $(cg_inc_dirs) $(asminline_inc_dirs) $(dwarfw_inc_dirs) -I"$(comp_cfg_dir)/h" -I"$(fe_misc_dir)/h"

.c: ../../c;$(asminline_c);$(watcom_dir)/c;$(fe_misc_dir)/c
.h: ../../h;$(watcom_dir)/h

#
# Common dependencies
#

# systems where version resources must be added to .EXE
version_res_exe_nt_386 = exever.res
version_res_exe_nt_x64 = exever.res

verrc_dll = $(dllname)
verrc_exe = $(exename)
!include verrc.mif

!ifndef bootstrap
all: $(bin_subdir) $(bin_exename).exe .symbolic
!endif

!ifdef cc_dll

$(bin_exename).exe : $(bin_dllname).dll $(comp_objs_drv) $(version_res_exe_$(host_os)_$(host_cpu)) $(__MAKEFILES__)
!ifndef __WATCOM_TOOLS__
    @%make echo_link
    $(cl) $(clflags_gen) $(comp_objs_drv) $(bin_dllname).lib $(ldflags_gen)
!else
    @%write drv.lnk $(lflags)
    @for %i in ($(comp_objs_drv)) do @%append drv.lnk file %i
    @%append drv.lnk lib $(bin_dllname).lib
!ifeq host_os dos
    @%append drv.lnk lib cwdll.lib
!endif
    @%make echo_link
    $(linker) name $@ @drv.lnk
!endif
    @%make bind_res_version_exe

!else

libs = $(asminline_lib) $(cg_libs)

$(bin_exename).exe: $(prebuild_objs) $(comp_objs_exe) $(libs) $(version_res_exe_$(host_os)_$(host_cpu)) $(__MAKEFILES__)
!ifndef __WATCOM_TOOLS__
    @%make echo_link
! ifdef bootstrap
    $(bld_cl) $(bld_clflags) $(comp_objs_exe) $(libs) $(bld_ldflags)
! else
    $(cl) $(clflags) $(comp_objs_exe) $(libs) $(ldflags)
! endif
!else
    @%write exe.lnk $(lflags)
    @for %i in ($(comp_objs_exe)) do @%append exe.lnk file %i
    @for %i in ($(libs)) do @%append exe.lnk lib %i
    @%make echo_link
    $(linker) name $@ @exe.lnk
!endif
    @%make bind_res_version_exe

!endif

dlltarg_prebuild_objs = $(dll_subdir) $(prebuild_objs)
dlltarg_objs = $(comp_objs_dll)
dlltarg_libs = $(asminline_lib) $(cg_libs)
# systems where version resources must be added to .DLL
dlltarg_res_version_nt_386 = version.res
dlltarg_res_version_nt_x64 = version.res

dlltarg_name = $(bin_dllname)
!include dlltarg.mif

#
# done
#

!ifeq target_cpu axp

codeaxp.gh :
    echo // Dummy file > $@

!else ifeq target_cpu ppc

codeppc.gh :
    echo // Dummy file > $@

!else ifeq target_cpu mps

codemps.gh :
    echo // Dummy file > $@

!else  # Intel i86 or 386

code$(target_cpu).gh : ./mkcode.exe xcode$(target_cpu).tmp
    @%make echo_execute
    $(noecho)$[@ $]@ $@
!endif

target_as_axp   = bwasaxp -zq -w8
target_as_i86   = bwasm -zq -w8
target_as_386   = bwasm -zq -w8 -3
target_as_ppc   = bwasppc -zq -w8
target_as_mps   = bwasmps -zq -w8

xcode$(target_cpu).tmp: ../../a/code$(target_cpu).asm
    @%make echo_aslink
    $(noecho)*$(target_as_$(target_cpu)) -I"$(watcom_dir)/h" -fo=.obj $[@
    $(noecho)*bwlink system bin op quiet file code$(target_cpu).obj name $@

./mkcode.exe: ../../a/mkcode.c
    @%make echo_bldcl
    $(bld_cl) $[@ $(bld_clflags) $(bld_ldflags)

msgtxt.gh msgdefs.gh msgattr.gh errors01.int : ../../gml/cerrs.gml
    @%make echo_msgencod
    $(noecho)msgencod -s -i -ip -q -g ../../gml/cerrs.gml msgtxt.gh msgdefs.gh msgattr.gh

./intlbin.exe: $(fe_misc_dir)/c/intlbin.c
    @%make echo_bldcl
    $(bld_cl) $[@ -I"$(fe_misc_dir)/h" $(bld_clflags) $(bld_ldflags)

$(bin_intname)01.int : ./intlbin.exe errors01.int usage01.int
    $[@ $@

./mkopcod1.exe: $(wasm_dir)/mkopcod1.c $(wasm_dir)/mkopcode.h
    @%make echo_bldcl
    $(bld_cl) $[@ -I. -I"$(wasm_dir)/h" $(bld_clflags) $(bld_ldflags)

asmops.gh: ./mkopcod1.exe $(wasm_dir)/inlnops.tok
    @%make echo_execute
    $(noecho)$[@ $(wasm_dir)/inlnops.tok $@

./mkopcode.exe: $(wasm_dir)/mkopcode.c $(wasm_dir)/mkopcode.h asmops.gh
    @%make echo_bldcl
    $(bld_cl) $[@ -I. -I"$(wasm_dir)/h" $(bld_clflags) $(bld_ldflags)

asmopsd.gh: ./mkopcode.exe $(wasm_dir)/inlnops.tok
    @%make echo_execute
    $(noecho)$[@ $(wasm_dir)/inlnops.tok $@

key_objs = ../../h/c.key ../../h/pc.key ../../h/seh.key

weights.gh keywords.gh : $(key_objs)
    @%make echo_findhash
    $(noecho)findhash -q -e ",OPR_NOP" $(key_objs)

# optencod options and targets for various hosts
optencod_opt_qnx = -u $(extra_link_res_$(host_os))
optencod_targ_bsd   = bsd
optencod_targ_haiku = haiku
optencod_targ_qnx   = qnx
optencod_targ_linux = linux
optencod_targ_osx   = linux
optencod_targ_rdos  = rdos
!ifeq release 0
optencod_targ_dbg = dbg
!endif

usage.gh usage01.int : ../../gml/options.gml
!ifeq verbose 0
    @echo optencod $@
!endif
    $(noecho)optencod -i -n -q $(optencod_opt_$(host_os)) $]@ . . usage.gh $(target_cpu) $(optencod_targ_dbg) $(optencod_targ_$(host_os))

echo_msgencod : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo msgencod $@
!endif

echo_findhash : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo findhash $@
!endif

echo_aslink : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo bld_as $[&.obj
    @echo bld_link $@
!endif
