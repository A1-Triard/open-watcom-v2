proj_name = wr
name = wr

!ifndef wr_autodepends
wr_autodepends = .AUTODEPEND
!endif

memory_model_i86 = l

sys_windowed = 1
sys_dll = 1
#suppress_bd = 1

wr_trmem = 1

!include cproj.mif
!include deftarg.mif
!include defrule.mif

.EXTENSIONS: .msg .res .rc

WINDOWS = 1
!include wres.mif
!include $(commonui_dir)/client.mif
!include $(cpp_dir)/client.mif

!include trmem.mif

object =    wrmain.obj wrmem.obj wrmsg.obj wrfindt.obj wrtmpfil.obj &
            wrrdw16.obj wrrdwnt.obj wrrdres.obj wrimg.obj &
            wrsvexe.obj wrsvres.obj &
            wridfile.obj wrinfo.obj wrstrdup.obj &
            wrrcmem.obj wrlist.obj wrdel.obj wrstr.obj wrclean.obj &
            wrdata.obj wrnamoor.obj wrwresid.obj &
            wrselft.obj wrmemf.obj wrdmsg.obj wrctl3d.obj &
            wrbitmap.obj wricon.obj wr_wres.obj wrselimg.obj &
            wrrnames.obj wrhash.obj wredit.obj wrutil.obj $(trmem_objs) &
            preproc.obj ppexpr.obj ppmacro.obj &
            rcerrprt.obj rcgetenv.obj &
            wrstubs.obj &
            pass2.obj exeseg.obj exeres.obj rcstr.obj ppalloc.obj &
            exeutil.obj exeobj.obj exerespe.obj rcio.obj semutil.obj &
            global.obj semstr.obj semsingl.obj semantic.obj semraw.obj &
            errors.obj tmpctl.obj autodep.obj layer0.obj incdirs.obj &
            dbtable.obj sharedio.obj rcspawn.obj

msgfiles = $(wrc_dir)/h/rc.msg ../res/wr.msg

extra_cpp_flags   = -DWIN_GUI -DWRDLL

extra_c_flags     = -s

extra_c_flags_win = -zu-zw-zc

# wr objects
extra_c_flags_wrmem = $(trmem_cover_cflags)

extra_c_flags_trmem = $(trmem_cflags)

.c:   ../c;$(trmem_dir);$(cpp_c_dirs);$(wrc_dir)/c;$(watcom_dir)/c

inc_dirs = -I. -I"../h" $(cpp_inc_dirs) -I"$(wres_dir)/h" -I"$(wrc_dir)/h" $(commonui_inc_dirs)

rc_inc_dirs = #$(cpp_inc_dirs) -I"$(wres_dir)/h" -I"$(wrc_dir)/h" $(commonui_inc_dirs)

xlibs = $(wres_lib) $(commonui_lib)

#------------- LIB
!ifdef __WATCOM__
$(name).lib: $(name).dll $(__MAKEFILES__)
        $(librarian) $(libflags) +$[@
!endif

#------------- LINK
extra_l_flags_dll = libpath $(sdk_misc_dir) op map
extra_l_flags_dll_nt = op stack=32k,heap=16k commit heap=8k
extra_l_flags_dll_nt += option offset=0x69900000
extra_l_flags_dll_win = op rwr,stack=16k export WEP RESIDENT
#extra_l_flags_dll_win += segment  _TEXT PRELOAD FIXED
#extra_l_flags_dll_win += segment  CLASS 'CODE' LOADONCALL MOVEABLE DISCARDABLE
#extra_l_flags_dll_win += segment  CLASS 'CODE' PRELOAD

# systems where version resources must be added to .DLL
version_res_dll_nt_386 = version.res
version_res_dll_nt_x64 = version.res

$(name).dll: ytab.gh rcmsg.gh $(object) $(xlibs) $(name).res $(version_res_dll_$(host_os)_$(host_cpu)) $(__MAKEFILES__)
!ifndef __WATCOM__
        $(cl) $(clflags) $(object) $(xlibs) $(ldflags)
!else
        $(linker) $(lflags) name $^@ file {$(object)} lib {$(xlibs)}
!endif
        $(rc) -k $(name).res $^@ $(bind_version_res_dll_add)

#---------- TEST
test_system_win_i86= windows
test_system_nt_386 = nt_win
test_system_nt_axp = ntaxp_win
test_system = $(test_system_$(host_os)_$(host_cpu))

test_lflags = system $(test_system) name test debug all libpath $(watcom_dir)/lib
test_lflags += option quiet, map, elim, v, static

test.exe: $(name).lib $(TESTLNK) test.obj
        $(linker) $(test_lflags) library $(name) file test

rcmsg.gh: wrmsg.gh
        awk -f $(build_dir)/msgtoh.awk $[@ > $^@

wrmsg.gh: ../res/master.msg $(msgfiles)
        $(cpp) $(rc_aui_flags) -I"../res" -I"$(wrc_dir)/h" $[@ >$^@

ytab.gh : $(wrc_dir)/y/rc.y $(wrc_dir)/y/yydriver.c $(wrc_dir)/h/rcmem.h
        $(yacc) -d -b $[@ $(wrc_dir)/y/yydriver.c >$(nulldevice)
        @cp ytab.h ytab.gh
        @rm -f ytab.h
        @rm -f ytab.c # ytab.c isn't used

$(name).res: ../res/wr.rc .AUTODEPEND
        $(rc) $(rc_flags) -ad $(rc_inc_path) $[@ -fo=$^@

!include verrc.mif
