/*
 *  fdi.h       File Compression Interface
 *
:include crwatcnt.sp
 */

#ifndef __FCI_INCLUDED__
#define __FCI_INCLUDED__

:include readonly.sp

#include <windows.h>

:include cpluspro.sp

/* The Microsoft defintions all contain FAR and DIAMONDAPI
 * declarations to maintain 16-bit compatibility.  Since
 * we're building only for 32- and 64-bit (maybe), we can
 * just leave these defines blank.  However, it's good to
 * maintain the same terminology as Microsoft, I suppose...
 */
#ifndef FAR
#define FAR
#endif
#ifndef DIAMONDAPI
#define DIAMONDAPI __cdecl
#endif

#define CB_MAX_CHUNK        32768U
#define CB_MAX_DISK         0x7fffffffL
#define CB_MAX_FILENAME     256
#define CB_MAX_CABINET_NAME 256
#define CB_MAX_CAB_PATH     256
#define CB_MAX_DISK_NAME    256

typedef enum {
    FCIERR_NONE,
    FCIERR_OPEN_SRC,
    FCIERR_READ_SRC,
    FCIERR_ALLOC_FAIL,
    FCIERR_TEMP_FILE,
    FCIERR_BAD_COMPR_TYPE,
    FCIERR_CAB_FILE,
    FCIERR_USER_ABORT,
    FCIERR_MCI_FAIL
} FCIERROR;

typedef void *HFCI;

typedef struct _CCAB {
    ULONG cb;
    ULONG cbFolderThresh;
    UINT cbReserveCFHeader;
    UINT cbReserveCFFolder;
    UINT cbReserveCFData;
    int iCab;
    int iDisk;
    USHORT setID;
    char szDisk[CB_MAX_DISK_NAME];
    char szCab[CB_MAX_CABINET_NAME];
    char szCabPath[CB_MAX_CAB_PATH];
} CCAB, *PCCAB;

typedef struct {
    int  erfOper;
    int  erfType;
    BOOL fError;
} ERF, FAR *PERF;
  
typedef void *(DIAMONDAPI *PFNFCIALLOC)( ULONG );
#define FNFCIALLOC(fn) void *DIAMONDAPI fn( ULONG )

typedef void (DIAMONDAPI *PFNFCIFREE)( void * );
#define FNFCIFREE(fn) void DIAMONDAPI fn( void * )

typedef INT_PTR (DIAMONDAPI *PFNFCIOPEN)   ( char *, int, int, int *, void * );
typedef UINT    (DIAMONDAPI *PFNFCIREAD)   ( INT_PTR, void *, UINT, int *, void * );
typedef UINT    (DIAMONDAPI *PFNFCIWRITE)  ( INT_PTR, void *, UINT, int *, void * );
typedef int     (DIAMONDAPI *PFNFCICLOSE)  ( INT_PTR, int *, void * );
typedef long    (DIAMONDAPI *PFNFCISEEK)   ( INT_PTR, long, int, int *, void * );
typedef int     (DIAMONDAPI *PFNFCIDELETE) ( char *, int *, void * );

#define FNFCIOPEN(fn)   INT_PTR DIAMONDAPI fn( char *, int, int, int *, void * )
#define FNFCIREAD(fn)   UINT    DIAMONDAPI fn( INT_PTR, void *, UINT, int *, void * )
#define FNFCIWRITE(fn)  UINT    DIAMONDAPI fn( INT_PTR, void *, UINT, int *, void * )
#define FNFCICLOSE(fn)  int     DIAMONDAPI fn( INT_PTR, int *, void * )
#define FNFCISEEK(fn)   long    DIAMONDAPI fn( INT_PTR, long, int, int *, void * )
#define FNFCIDELETE(fn) int     DIAMONDAPI fn( char *, int *, void * )

typedef BOOL (DIAMONDAPI *PFNFCIGETNEXTCABINET)( PCCAB, ULONG, void * );
#define FNFCIGETNEXTCABINET(fn) BOOL DIAMONDAPI fn( PCCAB, ULONG, void * )

typedef int (DIAMONDAPI *PFNFCIFILEPLACED)( PCCAB, char *, long, BOOL, void * );
#define FNFCIFILEPLACED(fn) int DIAMONDAPI fn( PCCAB, char *, long, BOOL, void * )

typedef INT_PTR (DIAMONDAPI *PFNFCIGETOPENINFO)( char *, USHORT *, USHORT *, USHORT *, int *, void * );
#define FNFCIGETOPENINFO(fn) INT_PTR DIAMONDAPI fn( char *, USHORT *, USHORT *, USHORT *, int *, void * )

#define statusFile 0
#define statusFolder 1
#define statusCabinet 2

typedef long (DIAMONDAPI *PFNFCISTATUS)( UINT, ULONG, ULONG, void * );
#define FNFCISTATUS(fn) long DIAMONDAPI fn( UINT, ULONG, ULONG, void * )

typedef BOOL (DIAMONDAPI *PFNFCIGETTEMPFILE)( char *, int, void * );
#define FNFCIGETTEMPFILE(fn) WINBOOL DIAMONDAPI fn( char *, int, void * )

typedef unsigned short TCOMP;
#define tcompTYPE_NONE        0x0000
#define tcompTYPE_MSZIP       0x0001

#define tcompTYPE_LZX         0x0003
#define tcompSHIFT_LZX_WINDOW 8
#define TCOMPfromLZXWindow(w) (((w) << tcompSHIFT_LZX_WINDOW) | (tcompTYPE_LZX))


HFCI DIAMONDAPI FCICreate( PERF, PFNFCIFILEPLACED, PFNFCIALLOC, PFNFCIFREE, PFNFCIOPEN, PFNFCIREAD, PFNFCIWRITE pfnwrite,PFNFCICLOSE, PFNFCISEEK, PFNFCIDELETE, PFNFCIGETTEMPFILE, PCCAB, void * );
BOOL DIAMONDAPI FCIAddFile( HFCI, char *, char *, BOOL, PFNFCIGETNEXTCABINET, PFNFCISTATUS, PFNFCIGETOPENINFO, TCOMP );
BOOL DIAMONDAPI FCIFlushCabinet( HFCI, BOOL, PFNFCIGETNEXTCABINET, PFNFCISTATUS );
BOOL DIAMONDAPI FCIFlushFolder( HFCI, PFNFCIGETNEXTCABINET, PFNFCISTATUS );
BOOL DIAMONDAPI FCIDestroy ( HFCI );

:include cplusepi.sp

#endif /* __FCI_INCLUDED__ */
