# the linker master make file
#
# This depends on the following projects:
# orl, plusplus, dwarf, watcom, and trmem

proj_name = wlink

!ifndef wlink_autodepends
wlink_autodepends = .AUTODEPEND
!endif

wlink_trmem = 1

# Base DLL name needs to be 8 chars or less on OS/2, argh! Additionally,
# internal module name may be required to match file name on some platforms.
!ifdef bootstrap
exetarg_name = bwlink
dlltarg_name = bwlinkd
!else
exetarg_name = wlink
dlltarg_name = wlinkd
!endif

# get rid of the -zc
suppress_zc = 1

!ifndef bootstrap
!include idedlls.mif
!endif
!include cproj.mif
!include defrule.mif
!include dllrule.mif
!include deftarg.mif
!include dllbase.mif
!include wres.mif
!include trmem.mif

!include $(orl_dir)/client.mif
!include $(dwarfw_dir)/client.mif

!include ../wlobjs.mif

#
# cflags
#
.c: ../c;$(watcom_dir)/c;$(wrc_dir)/c;$(lib_misc_dir)/c;$(trmem_dir)

inc_dirs = -I. -I"../h" $(dwarfw_inc_dirs) -I"$(orl_dir)/h" -I"$(wrc_dir)/h" &
    $(wres_inc_dirs) -I"$(lib_misc_dir)/h" -I"$(watcom_dir)/c"

extra_cpp_flags = -D__WLINK__ $(debug_cpp_flags)
!ifdef DLLS_IMPLEMENTED
extra_cpp_flags += -DDLLS_IMPLEMENTED
!endif
!ifeq use_virtmem 1
extra_cpp_flags += -DUSE_VIRTMEM
!endif
!ifndef wlink_dll
extra_cpp_flags += -DIDE_PGM
!endif

extra_cpp_flags_idedrv      = -DCHAIN_CALLBACK
extra_cpp_flags_ideentry    = -DCHAIN_CALLBACK
extra_cpp_flags_maindrv     = -DDLL_NAME=$(dlltarg_name)
extra_cpp_flags_rcstr       = -DINSIDE_WLINK
extra_cpp_flags_exereslx    = -DINSIDE_WLINK
extra_cpp_flags_exerespe    = -DINSIDE_WLINK
extra_cpp_flags_mergedir    = -DINSIDE_WLINK
extra_cpp_flags_sharedio    = -DINSIDE_WLINK
extra_cpp_flags_stidedrv    = -DSTATIC_LINKAGE
extra_cpp_flags_wlmem       = $(trmem_cpp_flags)

extra_c_flags_trmem         = $(trmem_cflags)
extra_c_flags_wlmem         = $(trmem_cover_cflags)

#
# lflags
#
extra_link_res_qnx = usage.u
additional_cleanup_qnx = $(extra_link_res_qnx)

extra_l_flags_qnx = op res=$(extra_link_res_qnx), st=24k, off=32k

extra_l_flags_dll     = option implib $(wlink_dllbase_$(host_os)_$(host_cpu))
extra_l_flags_dll_nt  = initinstance terminstance
extra_l_flags_dll_os2 = initinstance terminstance

# explicit rules
#################

#
# EXE
#
!ifdef wlink_dll
exetarg_prebuild_objs = $(extra_link_res_$(host_os)) $(dlltarg_name).dll
exetarg_objs          = $(comp_objs_drv)
exetarg_libs          = $(dlltarg_name).lib
!else
exetarg_prebuild_objs = $(extra_link_res_$(host_os)) rcmsg.gh
exetarg_objs          = $(comp_objs_exe)
!ifdef no_orl
exetarg_libs          = $(wres_lib) $(dwarfw_lib)
!else
exetarg_libs          = $(wres_lib) $(dwarfw_lib) $(orl_lib)
!endif
exetarg_res_wresui    = wresui.res
!endif
exetarg_res_version_nt_386 = exever.res
exetarg_res_version_nt_x64 = exever.res
!include exetarg.mif

#
# DLL
#
dlltarg_prebuild_objs = $(dll_subdir) rcmsg.gh
dlltarg_objs          = $(comp_objs_dll)
!ifdef no_orl
dlltarg_libs          = $(wres_lib) $(dwarfw_lib)
!else
dlltarg_libs          = $(wres_lib) $(dwarfw_lib) $(orl_lib)
!endif
dlltarg_res_wresui    = wresui.res
dlltarg_res_version_nt_386 = version.res
dlltarg_res_version_nt_x64 = version.res
modname_nt  = op modname='$(dlltarg_name).dll'
modname_os2 = op modname='$(dlltarg_name)'
!ifdef modname_$(host_os)
dlltarg_indirect      = $(modname_$(host_os))
!endif
!include dlltarg.mif

#
# rc and others
#
verrc_exe = $(exetarg_name)
verrc_dll = $(dlltarg_name)
!include verrc.mif

wresui.res : ../h/wlink.rc rcmsg.gh ../h/wlink.msg ../h/lnkerror.rc ../h/wlnkmsg.h ../h/lnkerror.msg $(__MAKEFILES__)
    @%make echo_rc
    $(rc_aui) -I"$(wrc_dir)/h" $[@ -fo=$@

rcmsg.gh : wrcmsg.gh $(__MAKEFILES__)
    @%make echo_awk
    $(awk) -v rcbase=800 -f $(build_dir)/msgtoh.awk -v OUTFILE=$^. $[@

wrcmsg.gh : $(wrc_dir)/h/rc.msg $(__MAKEFILES__)
    @%make echo_cpp
    $(cpp) $(rc_aui_flags) -o$@ $[@

$(extra_link_res_qnx) : ../h/usage.sp $(__MAKEFILES__)
    @%make echo_wsplice
    $(wsplice) -u $[@ $@
