proj_name = wfc

!ifndef wfc_autodepends
wfc_autodepends = .AUTODEPEND
!endif

!include cproj.mif
!include deftarg.mif
!include defrule.mif

!include $(cg_dir)/mif/fe.mif
!include $(as_dir)/mif/client.mif
!include $(wasm_dir)/mif/client.mif

!include wres.mif

!include ../../files.mif

!ifeq release 0
wfc_trmem = 1
!endif

inc_dirs= -I. -I.. -I"../../h" -I"../../../h" $(cg_inc_dirs) $(dwarf_dw_inc_dirs) -I"$(comp_cfg_dir)/h" -I"$(fe_misc_dir)/h" $(asminline_inc_dirs)

# define _USE_RESOURCES_ so that WASM error messages come from resources
extra_cpp_flags = -D_USE_RESOURCES_
!ifeq cg_dll 1
extra_cpp_flags += -D_CGDLL
!endif

extra_c_flags_i86 = -zp1
extra_c_flags_386 = -zp1

.h: ..;../../h;../../../h
.c: ..;../../c;../../../c;$(asminline_c);$(trmem_dir);

!ifeq host_cpu axp
extra_a_flags = -oc
.asm: ../../../asmaxp
!endif

!ifeq wfc_trmem 1
extra_c_flags_fmemmgr = -DTRMEM -I"$(trmem_dir)"
fobjs += trmem.obj trmemcvr.obj
!endif

exename_i86 = wfc
exename_386 = wfc386
exename_axp = wfcaxp
exename_ppc = wfcppc
target_exe  = $(exename_$(target_cpu))

extra_c_flags_trmem = -DTRMEM -of+
extra_c_flags_trmemcvr = -DTRMEM -of+
extra_c_flags_fcdata = $(cfloat_inc_dirs)

extra_l_flags += op map

# Need lots of stack for NT because code gen turns off safe recurse.
extra_l_flags_nt = op stack=1024k commit stack=32k

flibs = $(cfloat_lib) $(asminline_lib) $(cg_libs) $(wres_lib)

# systems where version resources must be added to .EXE
version_res_exe_nt_386 = exever.res
version_res_exe_nt_x64 = exever.res

$(target_exe).exe : $(asminline_deps) $(fobjs) errmsg.res $(flibs) $(version_res_exe_$(host_os)_$(host_cpu))
!ifndef __WATCOM__
    $(cl) $(clflags) $(fobjs) $(flibs) $(ldflags)
!else
    %create $^&.lnk
    @for %i in ($(fobjs)) do @%append $^&.lnk file %i
    @for %i in ($(flibs)) do @%append $^&.lnk lib %i
!ifeq host_os osi
    @%append $^&.lnk name $^&.rex
    $(linker) $(lflags) @$^&.lnk
    $(w32bind) $^&.rex $@ $(os2ldr)
    @rm -f $^&.rex
!else    
    @%append $^&.lnk name $@
    $(linker) $(lflags) @$^&.lnk
!endif
!endif
    @%make bind_version_res_exe
    $(wstrip) -q -a -r $@ . errmsg.res

option.obj : option.c optinfo.h

errmsg.res : ../../c/errmsg.rc ../../h/errmsgi.rc ../../h/errmsg3.rc ../../h/errcod.h ../../h/errcodi.h ../../h/errcod3.h
    $(rc_aui) -I. -I.. -I"../../h" -I"../../../h" $(asminline_inc_dirs) -I"$(comp_cfg_dir)/h" -I"$(fe_misc_dir)/h" $[@ -fo=$^@

./mkopcod1.exe: $(wasm_dir)/mkopcod1.c $(wasm_dir)/mkopcode.h
    $(bld_cl) $[@ -I. -I"$(wasm_dir)/h" $(bld_clflags) $(bld_ldflags)

asmops.gh: ./mkopcod1.exe $(wasm_dir)/inlnops.tok
    $[@ $(wasm_dir)/inlnops.tok $@

./mkopcode.exe: $(wasm_dir)/mkopcode.c $(wasm_dir)/mkopcode.h asmops.gh
    $(bld_cl) $[@ -I. -I"$(wasm_dir)/h" $(bld_clflags) $(bld_ldflags)

asmopsd.gh: ./mkopcode.exe $(wasm_dir)/inlnops.tok
    $[@ $(wasm_dir)/inlnops.tok $@

msg.gh : $(wasm_dir)/h/asmshare.msg
    $(awk) -v base=MSG_RC_BASE -f $(build_dir)/makemsg.awk $[@ > $^@

verrc_exe = $(target_exe)
verrc_exe_skel = ../../exever.rc
!include verrc.mif
